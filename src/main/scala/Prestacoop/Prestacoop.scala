// watch out as "provided" packages in sbt will not work using sbt
// Notes taken from : https://spark.apache.org/docs/2.4.5/rdd-programming-guide.html
// launch using Spark REPL:
//  ./bin/spark-shell --master local[4] --jars code.jar will work, no need for Spark context... (auto call to spark-submit stored in variable sc)
// master urls: https://spark.apache.org/docs/2.4.5/submitting-applications.html#master-urls
//  should not be hardcoded, but should use spark-submit

import org.apache.spark.SparkConf
import org.apache.spark.storage.StorageLevel
import org.apache.spark.streaming.{Seconds, StreamingContext}

object Prestacoop {
  def main(args: Array[String]): Unit = {
    if (args.length < 2) {
      System.err.println("Usage: Prestacoop <hostname> <port>")
      System.err.println(args.length)
      System.exit(1)
    }

    val sc = new SparkConf().setAppName("Prestacoop").setMaster("local[2]")
    val ssc = new StreamingContext(sc, Seconds(1))

    // Create a socket stream on target ip:port and count the
    // words in input stream of \n delimited text (eg. generated by 'nc')
    // Note that no duplication in storage level only for running locally.
    // Replication necessary in distributed scenario for fault tolerance.
    val lines = ssc.socketTextStream(args(0), args(1).toInt, StorageLevel.MEMORY_AND_DISK_SER)
    val words = lines.flatMap(_.split(" "))
    val wordCounts = words.map(x => (x, 1)).reduceByKey(_ + _)
    wordCounts.print()
    ssc.start()
    ssc.awaitTermination()
  }
}